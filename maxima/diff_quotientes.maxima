/**
 * Provides stuff for dealing with difference expressions...
 * notably:
 * DiffExpr returns a difference expression approximating an abritary derivation
 * DiffExprAD like DiffExpr but assumes a uniform grid
 */

INTERNAL_Taylorize(func, dif, deg, sv, sn) := block([tay:func, x],
  for i:1 thru deg do (
    tay:tay + dif^i/i! * INTERNAL_DiffExpr(func, deg, sv, sn) 
    ),
  tay
  );


INTERNAL_DiffExpr(f, ndiff, sv, sn):= block([f_internal, fEqu, taylorApprox, taylorSum:0, fSum:0, dh, dhSum : 0, addFakt],
  /* array(dh, sv + sn + 1), array(f, sv + sn + 1), */
  if ndiff = 0 then return(f),
    for i: -sv thru -1 do (
      dhSum : dhSum + dh[i],
    taylorApprox : INTERNAL_Taylorize(f, -dhSum, ndiff - 1, sv, sn),
        /* last term is missing... */
    taylorApprox : taylorApprox + (-dhSum)^ndiff/ndiff! * f_internal, 
    taylorSum : taylorSum + taylorApprox,
    fSum : fSum + f[i]
    ),
  if oddp(ndiff) then addFakt : -1 else addFakt : 1, /* for the last derivation terms to remain... */
  dhSum : 0,
  for i : 1 thru sn do (
    dhSum : dhSum + dh[i],
    taylorApprox : INTERNAL_Taylorize(f, dhSum, ndiff - 1, sv, sn),
        /* last term is missing... */
    taylorApprox : taylorApprox + (dhSum)^ndiff/ndiff! * f_internal,
    taylorSum : taylorSum + addFakt * taylorApprox,
    fSum : fSum + addFakt * f[i]
    ),
  fEqu :fSum = taylorSum,
  taylorApprox : solve(fEqu, f_internal),
  taylorApprox : rhs(taylorApprox[1]),
  ratsimp(taylorApprox)
  );


INTERNAL_TaylorizeAD(func, dif, deg, sv, sn) := block([tay:func, x],
  for i:1 thru deg do (
    tay:tay + dif^i/i! * INTERNAL_DiffExprAD(func, deg, sv, sn) 
    ),
  tay
  );


INTERNAL_DiffExprAD(f, ndiff, sv, sn):= block([f_internal, fEqu, taylorApprox, taylorSum:0, fSum:0, dh, addFakt],
  if ndiff = 0 then return(f),
  for i: -sv thru -1 do (
    taylorApprox : INTERNAL_TaylorizeAD(f, i * dh, ndiff - 1, sv, sn),
        /* last term is missing... */
    taylorApprox : taylorApprox + (i * dh)^ndiff/ndiff! * f_internal, 
    taylorSum : taylorSum + taylorApprox,
    fSum : fSum + f[i]
    ),
  if oddp(ndiff) then addFakt : -1 else addFakt : 1, /* for the last derivation terms to remain... */
  for i : 1 thru sn do (
    taylorApprox : INTERNAL_TaylorizeAD(f, i * dh, ndiff - 1, sv, sn),
        /* last term is missing... */
    taylorApprox : taylorApprox + (i * dh)^ndiff/ndiff! * f_internal,
    taylorSum : taylorSum + addFakt * taylorApprox,
    fSum : fSum + addFakt * f[i]
    ),
  fEqu :fSum = taylorSum,
  taylorApprox : solve(fEqu, f_internal),
  taylorApprox : rhs(taylorApprox[1]),
  ratsimp(taylorApprox)
  );



/**
 * Returns difference expression for ndiff - th derivation of f assuming nonequidistant grid
 * @param f function to be approximately derived
 * @param ndiff degree of derivation
 * @param sv number of values of f used for approximation left of the desired point
 * @param sn number of values of f used for approximation right of the desired point
 * @return difference expression
 */
DiffExpr(f, ndiff, sv, sn):= block([expr],
  depends(f, x),
  expr : INTERNAL_DiffExpr(f, ndiff, sv, sn),
  print("Approximation: ", diff(f,x, ndiff), " appr. ", expr),
  expr
  );


/**
 * Returns difference expression for ndiff - th derivation of f assuming equidistant grid
 * @param f function to be approximately derived
 * @param ndiff degree of derivation
 * @param sv number of values of f used for approximation left of the desired point
 * @param sn number of values of f used for approximation right of the desired point
 * @return difference expression
 */
DiffExprAD(f, ndiff, sv, sn):= block([expr],
  depends(f, x),
  expr : INTERNAL_DiffExprAD(f, ndiff, sv, sn),
  print("Approximation: ", diff(f,x, ndiff), " appr. ", expr),
  expr
  );
